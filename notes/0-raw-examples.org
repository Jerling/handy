
* epoll编程基础

** 1. main函数
#+BEGIN_SRC C++
  ::signal(SIGPIPE, SIG_IGN); /* 客户端主动close后，服务端可以继续write,
  第一次write返回RST, 第二次会返回 SIGPIPE 信号，默认是终止该服务进程，所以
  要将该信号忽略，防止服务进程退出 */
  httpRes = "HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: 1048576\r\n\r\n123456";
  /* 要发送给客户端的信息 */
  for (int i = 0; i < 1048570; i++) {
      httpRes += '\0';  // 不知道干啥的
  }
  short port = 80;
  int epollfd = epoll_create(1);  // 创建一个节点的 epoll
  exit_if(epollfd < 0, "epoll_create failed");
  int listenfd = socket(AF_INET, SOCK_STREAM, 0);
  exit_if(listenfd < 0, "socket failed");
  struct sockaddr_in addr;
  memset(&addr, 0, sizeof addr);
  addr.sin_family = AF_INET;
  addr.sin_port = htons(port);
  addr.sin_addr.s_addr = INADDR_ANY;
  int r = ::bind(listenfd, (struct sockaddr *) &addr, sizeof(struct sockaddr));
  exit_if(r, "bind to 0.0.0.0:%d failed %d %s", port, errno, strerror(errno));
  r = listen(listenfd, 20); // 监听
  exit_if(r, "listen failed %d %s", errno, strerror(errno));
  printf("fd %d listening at %d\n", listenfd, port);
  setNonBlock(listenfd); // 设置非阻塞
  updateEvents(epollfd, listenfd, EPOLLIN, EPOLL_CTL_ADD);
  for (;;) {  //实际应用应当注册信号处理函数，退出时清理资源
      loop_once(epollfd, listenfd, 10000);
  }
#+END_SRC

** 2. 设置非阻塞
#+BEGIN_SRC cpp
void setNonBlock(int fd) {
    int flags = fcntl(fd, F_GETFL, 0);              // 提取flags
    exit_if(flags < 0, "fcntl failed");
    int r = fcntl(fd, F_SETFL, flags | O_NONBLOCK); // 添加非阻塞flag
    exit_if(r < 0, "fcntl failed");
}
#+END_SRC

** 3. updateEvents
   将句柄和对应的事件的 *epoll_event* 节点插入到epoll上
#+BEGIN_SRC cpp
void updateEvents(int efd, int fd, int events, int op) {
    struct epoll_event ev;
    memset(&ev, 0, sizeof(ev));
    ev.events = events;
    ev.data.fd = fd;
    printf("%s fd %d events read %d write %d\n", op == EPOLL_CTL_MOD ? "mod" : "add", fd, ev.events & EPOLLIN, ev.events & EPOLLOUT);
    int r = epoll_ctl(efd, op, fd, &ev);
    exit_if(r, "epoll_ctl failed");
}
#+END_SRC

** 4. loop_once
检查满足条件的事件的个数，并调用相应条件的处理函数
#+BEGIN_SRC cpp
void loop_once(int efd, int lfd, int waitms) {
    const int kMaxEvents = 20;
    struct epoll_event activeEvs[100];
    int n = epoll_wait(efd, activeEvs, kMaxEvents, waitms);
    if (output_log)
        printf("epoll_wait return %d\n", n);
    for (int i = 0; i < n; i++) {
        int fd = activeEvs[i].data.fd;
        int events = activeEvs[i].events;
        if (events & (EPOLLIN | EPOLLERR)) {
            if (fd == lfd) {
                handleAccept(efd, fd);   // 处理请求事件
            } else {
                handleRead(efd, fd);      // 处理读事件
            }
        } else if (events & EPOLLOUT) {
            if (output_log)
                printf("handling epollout\n");
            handleWrite(efd, fd);          // 处理写入事件
        } else {
            exit_if(1, "unknown event");
        }
    }
}
#+END_SRC

[[file:../raw-examples/epoll.cc][epoll.cc]]

* 学习心得
** 1. epoll
一种 I/O 多路复用的实现机制

1. =epoll_create(N)= 创建包含 N 个节点的 epoll 红黑树，返回 epoll 描述符 =efd=;
2. =socket= 获得一个监听描述符 =lfd=, =bind= 到指定的地址和端口, =listen= 进行监听;
3. 提取 =fld= 的模式并将 =NOBLOCK= 加入到模式中设置非阻塞；
4. 定义事件 =epoll_event=, 并赋值 =lfd= 以及要监听的事件, 使用 =epoll_ctl= 将该事件安插到 =efd= 上；
5. =epoll_wait= 对安插到 =efd= 上的事件进行监听，并返回满足条件的事件；
6. 调用相关事件处理函数；
** 2. epoll与 select、poll比较
1. 事件驱动
2. 底层使用红黑树
3. 只返回满足条件的事件，无须遍历全部监听事件
** 3. #define的使用：使用宏定义简化代码以及定位bug位置
#+BEGIN_SRC cpp
#define exit_if(r, ...)                                                                          \
    if (r) {                                                                                     \
        printf(__VA_ARGS__);                                                                     \
        printf("%s:%d error no: %d error msg %s\n", __FILE__, __LINE__, errno, strerror(errno)); \
        exit(1);                                                                                 \
    }
#+END_SRC
** 4. C/C++编译器内置宏
1. *#* ：表示编译预处理。如： =#ifdef= 、 =#endif= 等
2. *##* ：在宏定义中拼接字符串，构成新的标识符。如 =#define SETTEST(N) test_ ##N= 使用时： =int SETTEST(1)=2 <=> int test_1=2=
3. *\* : 在宏定义时将不同行连接成一行。如上 =exit_if=
4. *__FILE__* : 文件路径及文件名
5. *__LINE__* : 所在源代码中的行号
6. *__VA_ARGS__* : 可变参数宏
7. *__DATE__* : 编译日期
8. *__TIME__* : 编译时刻
9. *__STDC__* : 要求严格遵循 ANSI C 标准时为 1
10. *__cplusplus* : 编写 c++ 时被定义

* EventBase 源码剖析

** 1. EventBase的特性
作为事件管理中心，它不能被复制。
#+begin_src cpp
// 定义仅有不能复制特性的基类
struct noncopyable {
   protected:
    noncopyable() = default;
    virtual ~noncopyable() = default;

    noncopyable(const noncopyable &) = delete;
    noncopyable &operator=(const noncopyable &) = delete;
};

// 让EventBase继承不能复制的特性
struct EventBases : private noncopyable {
    virtual EventBase *allocBase() = 0;
};
#+end_src
这段代码使用C++的 *delete*
关键字显示禁用拷贝构造函数和赋值构造函数，因为C++默认会自动创建这两个函数，必须显示禁用

** 2. EventBase的功能
EventBase作为时间派发器，最基本的功能就是管理事件的监听、连接、超时连接以及定时等功能。

*** 2.1. 单线程 EventBase
**** 2.1.1. EventBase 接口
在 =event_base.h= 头文件中查看  *EventBase* 接口的提供的  =function= 。
#+begin_src cpp
//事件派发器，可管理定时器，连接，超时连接
struct EventBase : public EventBases {
    // taskCapacity指定任务队列的大小，0无限制
    EventBase(int taskCapacity = 0);
    ~EventBase();
    //处理已到期的事件,waitMs表示若无当前需要处理的任务，需要等待的时间
    void loop_once(int waitMs);
    //进入事件处理循环
    void loop();
    //取消定时任务，若timer已经过期，则忽略
    bool cancel(TimerId timerid);
    //添加定时任务，interval=0表示一次性任务，否则为重复任务，时间为毫秒
    TimerId runAt(int64_t milli, const Task &task, int64_t interval = 0) { return runAt(milli, Task(task), interval); }
    TimerId runAt(int64_t milli, Task &&task, int64_t interval = 0);
    TimerId runAfter(int64_t milli, const Task &task, int64_t interval = 0) { return runAt(util::timeMilli() + milli, Task(task), interval); }
    TimerId runAfter(int64_t milli, Task &&task, int64_t interval = 0) { return runAt(util::timeMilli() + milli, std::move(task), interval); }

    //下列函数为线程安全的

    //退出事件循环
    EventBase &exit();
    //是否已退出
    bool exited();
    //唤醒事件处理
    void wakeup();
    //添加任务
    void safeCall(Task &&task);
    void safeCall(const Task &task) { safeCall(Task(task)); }
    //分配一个事件派发器
    virtual EventBase *allocBase() { return this; }

   public:
    std::unique_ptr<EventsImp> imp_;  // 定义指向实现的智能指针
};
#+end_src

头文件中包含  *EventsImp* 的智能指针指向  *EventBase*实现的类，实现接口与实现的分离。  *EventBase* 提供接口暴露给外部， 封装 *EventsImp* 的实现细节。

**** 2.1.2. EventBase 的实现 -- EventsImp
现在追踪到实现  =event_base.cc= 中的  *EventsImp* :

1. 构造函数
#+begin_src cpp
EventBase::EventBase(int taskCapacity) {
    imp_.reset(new EventsImp(this, taskCapacity));
    imp_->init();
}
#+end_src
 =EventBase= 将  =this= 传递到实现  =EventsImp= , 即将所有权交给实现。
#+begin_src cpp
EventsImp::EventsImp(EventBase *base, int taskCap)
    : base_(base), poller_(createPoller()), exit_(false), 
    nextTimeout_(1 << 30), tasks_(taskCap), timerSeq_(0), idleEnabled(false) {}
#+end_src
再看看 =init()= 函数：
#+begin_src cpp
void EventsImp::init() {
    int r = pipe(wakeupFds_);
    fatalif(r, "pipe failed %d %s", errno, strerror(errno));
    r = util::addFdFlag(wakeupFds_[0], FD_CLOEXEC);
    fatalif(r, "addFdFlag failed %d %s", errno, strerror(errno));
    r = util::addFdFlag(wakeupFds_[1], FD_CLOEXEC);
    fatalif(r, "addFdFlag failed %d %s", errno, strerror(errno));
    trace("wakeup pipe created %d %d", wakeupFds_[0], wakeupFds_[1]);
    Channel *ch = new Channel(base_, wakeupFds_[0], kReadEvent);  // 建立连接
    ch->onRead([=] {
        char buf[1024];
        int r = ch->fd() >= 0 ? ::read(ch->fd(), buf, sizeof buf) : 0;
        if (r > 0) {
            Task task;
            while (tasks_.pop_wait(&task, 0)) {
                task();
            }
        } else if (r == 0) {  // 返回0个字节, 表示对端调用 close
            delete ch;        // 关闭连接
        } else if (errno == EINTR) {
        } else {
            fatal("wakeup channel read error %d %d %s", r, errno, strerror(errno));
        }
    });
}
#+end_src
- addFdFlag 函数封装 fcntl 函数，用于设置描述符的 flags,  =FD_CLOEXEC= 即
  =close on exec= :在执行完就关闭描述符；在fork子进程后，一般调用exec执行另一个程序，
  此时会用全新的程序替换子进程的正文，数据，堆和栈等。此时保存文件描述符的变量当然也不存在了，
  就无法关闭无用的文件描述符了。所以通常fork子进程后在子进程中直接执行close关掉无用的文件描述符，然后再执行exec。
  
  但是在复杂系统中，有时fork子进程时已经不知道打开了多少个文件描述符（包括socket句柄等），
  这此时进行逐一清理确实有很大难度。期望的是能在fork子进程前打开某个文件句柄时就指定好：
  “这个句柄我在fork子进程后执行exec时就关闭”。其实时有这样的方法的：即所谓的 =close-on-exec=

-  =Channel= 封装了 epoll 相关函数，kReadEvent 被设置为 POLLIN
   常量。将描述符以及相应事件  =epoll_ctl= 连接到 epoll 树上。后续剖析  =Channel=

-  =onRead= 设置读回调函数

2. 析构函数由于使用智能指针，所以会自动回收资源，所以析构只需定义就行，其他的工作不需要做
#+begin_src cpp
EventBase::~EventBase() {}
#+end_src

3. 循环函数
#+begin_src cpp
void PollerEpoll::loop_once(int waitMs) {
    int64_t ticks = util::timeMilli();
    lastActive_ = epoll_wait(fd_, activeEvs_, kMaxEvents, waitMs);
    int64_t used = util::timeMilli() - ticks;
    trace("epoll wait %d return %d errno %d used %lld millsecond", waitMs, lastActive_, errno, (long long) used);
    fatalif(lastActive_ == -1 && errno != EINTR, "epoll return error %d %s", errno, strerror(errno));
    while (--lastActive_ >= 0) {
        int i = lastActive_;
        Channel *ch = (Channel *) activeEvs_[i].data.ptr;
        int events = activeEvs_[i].events;
        if (ch) {
            if (events & (kReadEvent | POLLERR)) {
                trace("channel %lld fd %d handle read", (long long) ch->id(), ch->fd());
                ch->handleRead();
            } else if (events & kWriteEvent) {
                trace("channel %lld fd %d handle write", (long long) ch->id(), ch->fd());
                ch->handleWrite();
            } else {
                fatal("unexpected poller events");
            }
        }
    }
}

void EventsImp::loop() {
    while (!exit_)
        loop_once(10000);
    timerReps_.clear();
    /*
     * std::map<TimerId, TimerRepeatable> timerReps_;
     * typedef std::pair<int64_t, int64_t> TimerId;
     * struct TimerRepeatable {   // 保存重复定时任务结构体
     *     int64_t at;  // current timer timeout timestamp
     *     int64_t interval;
     *     TimerId timerid;
     *     Task cb;
     * };
     */
    timers_.clear();
    /*
     * std::map<TimerId, Task> timers_;  // 一次定时结构体
     */
    idleConns_.clear();
    /*
     * std::map<int, std::list<IdleNode>> idleConns_;
     * std::set<TcpConnPtr> reconnectConns_;
     * struct IdleNode {
     *     TcpConnPtr con_;
     *     int64_t updated_;
     *     TcpCallBack cb_;
     * };
     */
    for (auto recon : reconnectConns_) {  //重连的连接无法通过channel清理，因此单独清理
        recon->cleanup(recon);
    }
    loop_once(0);
}
#+end_src

3. 分配事件派发器
#+begin_src cpp
//分配一个事件派发器
virtual EventBase *allocBase() { return this; }
#+end_src

4. 添加任务，唤醒、退出任务
#+begin_src cpp
void safeCall(Task &&task) {
  tasks_.push(move(task));
  wakeup();
}

void wakeup() {
  int r = write(wakeupFds_[1], "", 1);
  fatalif(r <= 0, "write error wd %d %d %s", r, errno, strerror(errno));
}

// eventbase functions
EventBase &exit() {
  exit_ = true;
  wakeup();
  return *base_;
}

bool exited() { return exit_; }
#+end_src

5. 添加定时任务
#+begin_src cpp
/**
* @brief runAt    :添加定时任务
*
* @param milli    :发生时间戳
* @param task     :回调函数
* @param interval :重新设置定时任务的间隔, 0 表示一次性定时任务
*
* @return         :定时任务id
*/
TimerId EventsImp::runAt(int64_t milli, Task &&task, int64_t interval) {
    if (exit_) {
        return TimerId();
    }
    if (interval) {
        TimerId tid{-milli, ++timerSeq_};
        TimerRepeatable &rtr = timerReps_[tid];
        rtr = {milli, interval, {milli, ++timerSeq_}, move(task)};
        TimerRepeatable *tr = &rtr;
        timers_[tr->timerid] = [this, tr] { repeatableTimeout(tr); };
        refreshNearest(&tr->timerid);
        return tid;
    } else {
        TimerId tid{milli, ++timerSeq_};
        timers_.insert({tid, move(task)});
        refreshNearest(&tid);
        return tid;
    }
}

TimerId runAfter(int64_t milli, Task &&task, int64_t interval = 0) {
      return runAt(util::timeMilli() + milli, std::move(task), interval);
}
#+end_src

6. 取消定时任务
#+begin_src cpp
bool EventsImp::cancel(TimerId timerid) {
    if (timerid.first < 0) {
        auto p = timerReps_.find(timerid);
        auto ptimer = timers_.find(p->second.timerid);
        if (ptimer != timers_.end()) {
            timers_.erase(ptimer);
        }
        timerReps_.erase(p);
        return true;
    } else {
        auto p = timers_.find(timerid);
        if (p != timers_.end()) {
            timers_.erase(p);
            return true;
        }
        return false;
    }
}
#+end_src

** 3. 总结
EventBase 的源码采用接口与实现分离的方式，将 EventBase 接口的实现封装在
EventsImp 中。这里只对 EventBase
的API的功能做了简单的剖析，但是内部实现涉及很多其他的对象(Chanel、util)。这些后续继续剖析...
这里有个疑问：

runAfter 的实现依赖于 runAt，内部实现一模一样，只是定时的时间加上
util::timeMilli 后就可以添加延迟的定时任务，这个是怎么实现的？ 等剖析完 util
的源码，也许会有答案，先留个问题。
